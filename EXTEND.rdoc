For Tenacity to interact with a database client, the client needs to be extended
to support the methods listed below.  Beyond that, no additional configuration
or code is necessary.  Tenacity communicates with the client using these methods
only, so as long as they have been implemented and are available on the model
object, Tenacity will be able to manage the object's relationships.


== A note about IDs

An ID can be an integer, a string, or an object, depending on the database
and database client you are using.  To be as compatible as possible, Tenacity
treats all IDs as strings.  So, all database client extensions should accept
strings for IDs as input parameters, and return strings for IDs.


== The Association Class

A few of the methods take an association as a parameter.  This association
is an instance of the Tenacity::Association class, which can be found at
lib/tenacity/association.rb.


== Class Methods

  _t_find(id)

Find an object by its id, and return it.  If the object cannot be found,
return nil.

  _t_find_bulk(ids=[])

Find many objects by the specified ids, and return them in an array.
If no objects could be found, return an empty array.  If only some of
the objects could be found, then simply return those objects in the array.

  _t_find_first_by_associate(property, id)

Find the first object by the specified property name, with the specified id,
and return it.  If no object could be found, return nil.

  _t_find_all_by_associate(property, id)

Find all objects by the specified property name, with the specified id, and
return them in an array.  If no objects could be found, return an empty array.
If only some of the objects could be found, then simply return those objects
in the array.

  _t_delete(ids, run_callbacks=true)

Delete all objects with the specified ids.  If <tt>run_callbacks</tt> is true, the
objects should be deleted in such a way that their delete callback methods
are run.  If false, the objects should be deleted in such a way that their
delete callback meethods are not run.  Return nothing.

  _t_initialize_has_many_association(association)

Perform any database client specific initialization necessary to support a has
many association.  This could include defining properties, or callback methods,
on the object.  This method is optional, and does not need to be defined.

  _t_initialize_belongs_to_association(association)

Perform any database client specific initialization necessary to support a
belongs to association.  This could include defining properties, or callback
methods, on the object.  This method is optional, and does not need to be
defined.

  _t_initialize_has_one_association(association)

Perform any database client specific initialization necessary to support a has one
association.  This could include defining properties, or callback methods,
on the object.  This method is optional, and does not need to be defined.


== Instance Methods

  _t_reload

Reload the object from the database, overwriting the objects properties with
the data fetched from the database.  Return nothing.

  _t_associate_many(association, associate_ids)

Create has_many associations between this object and the objects with ids
specified in the array of associate_ids.  This method could involve writing
the associate_ids into a join table, or into one of the object's properties.
Return nothing.

  _t_get_associate_ids(association)

Get the ids of the objects associated with this object through the specified
association, and return them in an array.  Return an empty array if there
are no associated objects.

  _t_clear_associates(association)

Destroy the association between this object and its current associates through
the specified association.  Return nothing.

